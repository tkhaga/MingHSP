※まだ完成していませんが一応入れておきます

  ＠MingHSPによるFlash作成の手引き

      MingHSPではいろいろなオブジェクトを作成し、それを動かしたりするなどし
    てFlashを作成します。
      オブジェクトとは図形や画像、音声等のデータのことでそれぞれの種類ごとに
    オブジェクトの種類が存在します。
      ここではチュートリアル形式で、MingHSPによるFlashの作成方法を解説してい
    きます。

  ・チュートリアル１
    まずは作ってみよう

      最初なので直線が表示されるだけの簡単なFlashを作成してみましょう。
      まずはSWFShapeオブジェクトを作成します。SWFShapeオブジェクトは図形を扱
    うオブジェクトで、これに対していろいろな命令を使って操作することで図形を
    描きます。

	SWFShape shape

      これを実行すると、SWFShapeオブジェクトが作成されて変数shapeに代入され
    ます。
      図形を描く等の操作をする前に、変数shapeのオブジェクトを操作対象に設定
    しなければなりません。これを行うには

	sel_s shape

      を実行します。なお、SWFShape命令を初めて実行する時はこれは不要です。
      では直線を引いてみましょう。線を引くにはまず線の太さと色を設定する必要
    があります
      これを行うのがs_setLine命令で、次の様に使います

	s_setLine 5,255,0,255,255

      第１パラメータに線の太さ、第２〜５パラメータで線の色を設定します。線の
    色はR,G,B,A(赤、緑、青、透明度)の形式で、0〜255の範囲です。上の場合線の
    色は紫色になります。
      ではいよいよ直線を引いてみます。しかしMingHSPで直線を引く命令には
    s_drawLineとs_drawLineToの２つがあります。
      ここではその違いを理解するために、色を変えてそれぞれの命令で線を引いて
    みます。
      その前にここで次の命令を紹介します

	s_movePenTo，s_movePen

      これらは描画の基準点を設定するものです。オブジェクトを作成した直後は基
    準点は左上に設定されていますが、s_drawLineなどで線を引くとこれがその線の
    端に移動します。
      上の比較をするためには一度線を引いたら基準点をまたもとの場所に戻さなけ
    ればなりません。
      前者は直接移動する先の座標を、後者は今いる位置からどれだけ移動するかを
    指示します。
      例えば左上に移動するには

	s_movePenTo 0,0

      と入力します。ここで注意しなければならないのはパラメータの数字が単精度
    浮動小数点数(以下float値)でなければならないということです。
      float値とは小数を表すためのデータ形式です(0は整数の0と同じなので上の様
    に表記できます)。HSP 3.0では自動で変換してくれるので意識する必要はありま
    せん。HSP 2.55以降では数字の後にfをつけるとfloat値になるのでこれを使って
    ください。HSP 3.0でもこの表記でOKですので以降チュートリアルでfloat値を扱
    う時はこの書きかたをします。
      HSP 2.5の場合はMingHSPに搭載されたmhsp_float命令を使って整数から変換し
    ます。
      計算については、HSP 3.0なら普通に計算式の中で扱えます。HSP 2ではやはり
    MingHSPの命令を使う必要があります。ここでは詳しくは触れません。
      これをふまえると、座標(120,120)に移動するには

	s_movePenTo 120f,120f

      とすればいいことが分かります。
      さて、s_drawLineとs_drawLineToの違いですがもうお分かりでしょう。前者で
    は直線のもう一方の端の座標を現在の描画基準点からの相対的な位置を、後者は
    直線のもう一方の端の座標を直接パラメータに取ります。そしてこちらもfloat
    値です。

      では描画基準点を(120,120)にして、前者の色を(255,0,255,255)、後者の色を
    (0,255,255,255)にしてパラメータを同じにして線を引いてみます

	s_setLine 5,255,0,255,255
	s_movePenTo 120f,120f
	s_drawLine 60f,60f

	s_setLine 5,0,255,255,255
	s_movePenTo 120f,120f
	s_drawLineTo 60f,60f

      これで線を引くことができました。しかしこのままではどのような結果になっ
    ているか分からないのでFlashファイルに出力します。
      そのために今度はSWFMovieオブジェクトを作成します

	SWFMovie movie

      SWFShape命令同様にSWFMovieオブジェクトが作成されて変数movieに代入され
    ます。
      SWFMovieオブジェクトはいわばFlashムービーを表すもので、ムービー全体に
    関係する情報を持っています。ファイルに出力するには必ず作成する必要があり
    ます。

	sel_m movie

      これもsel_sと同様に変数movieのSWFMovieオブジェクトを、SWFMovieオブジェ
    クトを操作する命令の操作対象とします。
      SWFMovieオブジェクトに変数shapeのSWFShapeオブジェクトを追加します。

	m_add i,shape

      これで先ほど作成した図形がムービーの一部になったわけです。
      なお、この命令ではほかにもいくつかの種類のオブジェクトを追加できます。
      変数iには変数shapeのSWFShapeオブジェクトに対応するSWFDisplayItemオブジ
    ェクトが代入されます
      これについては次のチュートリアル２で扱います。そして最後に

	m_save "tutorial1.swf"

      を実行し、"tutorial1.swf"というファイル名でFlashを保存します
      あとはこのファイルをInternet Explorerで開けば見ることができます。
      ある一点から色の違う二本の直線が反対方向に伸びていると思います。

      これでチュートリアル１は終了です。このチュートリアルの内容を使ったサン
    プルスクリプトはtutorial1.asです(HSP 3.0版はtutorial1.hsp)

  ・チュートリアル２
    初めてのアニメーション

      チュートリアル１では基本的なFlash作成の流れをやりました
      今度はいよいよアニメーションを作成してみたいと思います。

      そのためにはフレームというものを理解する必要があります
      Flashにおけるフレームとは、パラパラマンガの一枚一枚のようなものと考え
    てください。
      SWFMovieオブジェクトを作成した直後はこのフレームは1枚目に設定されてい
    ます。
      チュートリアル１では1枚目しか使っていなかったので動かないFlashができた
    というわけです。
      別のフレームに移るにはm_nextFrame命令を使います。この命令を実行すると
    現在の操作対象になっているSWFMovieオブジェクトで現在のフレームの次のフレ
    ームに移動します。MingHSPには前のフレームに戻ったり任意のフレームに戻る
    機能は無いので、これが唯一の(多分)フレーム移動命令です。
      試しにチュートリアル１(tutorial1.swf)でm_addの行とm_saveの行の間に
    m_nextFrame命令を入れてみてください。…Internet Explorerで再生しても何も
    変化が無いはずです。
      さて、アニメーション製作に入ると確認用のプレーヤーとして
    Internet Explorerでは物足りなくなってくるので、別のプレイヤーを導入して
    ください。
      お勧めはCamel氏のFlashPlayerEx(http://www.zan9.com/)です。
    Internet Explorerの右クリックメニューからFlashをダウンロードできたり、キ
    ャッシュのFlashを再生することもできます。
      このソフトを使ってチュートリアル１で作成したFlashとさっき作成したもの
    をそれぞれ開いてみてください。
      前者では右下に1/1と表示されていると思いますが、後者では2/2となっている
    はずです。
      ここにはフレーム番号が表示されるので、フレームがひとつ増えたのがわかり
    ます。

      では、アニメーションさせるにはどうしたらよいのでしょうか。
      ここでムービーにオブジェクトを追加するm_add命令を思い出してください。

	m_add i,shape

      チュートリアル１ではこのようにして変数shapeに代入されたオブジェクトを
    SWFMovieオブジェクトに追加しました。
      では、第一パラメータのiは何でしょうか。これには変数を指定して、命令が
    実行されると追加したオブジェクトに対応するSWFDisplayItemオブジェクトが
    代入されます。
      これを操作することでそれぞれのフレームでのオブジェクトの位置を移動した
    りしてアニメーションを作ることができます。
      ではまず、変数iのSWFDisplayItemをSWFDisplayItemを操作する命令の操作対
    象にします

	sel_i i

      これは今までと同じような流れですね。
      ではとりあえず、ここでは直線が上下左右に動くだけというシンプルなアニメ
    ーションを作ってみましょう。ここで使う命令は

	i_move fx,fy

      です。この命令は、現在のフレームでのオブジェクトの位置を(X, Y)方向に
    (fx, fy)だけ動かすというものです。fx,fyはfloat値です(float値についてはチ
    ュートリアル１参照)
      また、s_drawLine同様にi_moveToという命令もあります。これらの違いはチュ
    ートリアル１を読んでもらえばわかると思います。
      アニメーション製作の基本的な流れは、

      最初のフレームにm_add命令でオブジェクトを追加
        ↓
      位置を変える
        ↓
      m_nextFrameで次のフレームに移動
        ↓
      位置を変える
        ↓
      ・・・

      といったものです。
      直線が１フレームごとに(X, Y)方向に(20, 20)ずつずれていくスクリプトは、
    直線のSWFDisplayItemオブジェクトが代入されている変数をiとすると、以下の
    ようになります。

	sel_i i
	repeat 10
		m_nextFrame
		i_move 20f,20f
	loop

      ここでは全部で11フレームになるようにしています(最初のフレーム数は1、
    m_nextFrameを一回使うごとにフレーム数は1増える)
      あとはm_saveでファイルに出力して完成です。

      アニメーションの制作方法、理解していただけたでしょうか？
      MingHSPではオブジェクトを移動させるだけではなく、回転させたり、大きさ
    を変えたり、色を徐々に変えていくこともできます。また、ムービークリップと
    いう仕組みを用いることでムービーの中にさらにムービーを作ることもできます
      これらのやり方については後のチュートリアルで解説します。

      最後にフレームレートについても触れておきましょう。
      フレームレートとは一秒間に表示されるフレーム数のことです。MingHSPでフ
    レームレートを指定するにはm_setRate命令を使います。

	m_setRate fps

      このように第一パラメータに一秒間に表示するフレーム数をfloat値で指定し
    ます。標準では12に設定されています
      必ずSWFMovieを実行してsel_mで操作対象を指定した後に実行してください
      注意しなければならないのは、この命令を複数回使っている場合でも最後に設
    定したものが全体に適用されるということです。なのでムービーの途中でフレー
    ムレートを変えるということはできません。

      これでチュートリアル２は終了です。このチュートリアルの内容を使ったサン
    プルスクリプトはtutorial2.asです(HSP 3.0版はtutorial2.hsp)

  ・チュートリアル３
    画像ファイルを使ってみる

      このチュートリアルではMingHSPで画像ファイルを扱う方法を解説したいと思い
    ます。

      画像ファイルをMingHSPで使うには、いったんDBLという形式に変換する必要が
    あります。MingHSPには、BMP, PNG, GIFからDBL形式のファイルを作成する
    ソフトが付属しています。bmp2dbl.exeはBMPファイルから、png2dbl.exeはPNG
    ファイルから、gif2dbl.exeはGIFファイルからDBLファイルを作成します。それ
    ぞれの実行ファイルにそれぞれの形式のファイルをドラッグ＆ドロップすれば
    DBLファイルが作成されます(拡張子はDBL)。
      このDBLファイルを使って、まずはSWFBitmapオブジェクトを作成します

	SWFBitmap bitmap,"test.dbl"

      DBLファイルの"test.dbl"からSWFBitmapオブジェクトを作成し、変数bitmapに
    代入します。
      そしたら、SWFShapeオブジェクトをムービーに追加した時と同様に、SWFMovie
    オブジェクトを作成し、変数bitmapのSWFBitmapオブジェクトをm_add命令で追加
    します

	SWFMovie movie
	sel_m movie
	m_add i,bitmap

      そうしたらチュートリアル２と同様に変数iに代入されたSWFDisplayItemを操
    作してアニメーションさせることが出来ます。前回はただ移動するだけだったの
    で、今回は回転させて見ましょう。

＠ActionScriptかいせつもどき（まだできていません、読み飛ばしてください）


＠命令リファレンス

float値について
単精度浮動小数点数のことをfloat値と呼ぶことにする

以下において、オブジェクトの種名に次の略称を用います（左が略称、右は正式名称）
s	SWFShape
直線、曲線、多角形、円、円弧などの図形を扱うオブジェクトです

m	SWFMovie
Flashムービーの縦横のサイズ、フレーム数、フレームレートやファイルの出力といったムービー全体に関する事柄を扱うオブジェクトです

i	SWFDisplayItem
SWFShapeやSWFBitmapなどを移動したり回転させたりなど、表示にかかわる部分を扱うオブジェクトです
m_add，mc_addでムービー、ムービークリップに加えた時に作成されます。

g	SWFGradient
グラデーションを扱うオブジェクトです
bmp	SWFBitmap
画像を扱うオブジェクトです

f	SWFFill
他のオブジェクトの色やテクスチャを扱うオブジェクトです

p	SWFMorph
モーフィングを扱うオブジェクトです

t	SWFText
テキストを扱うオブジェクトです

fnt	SWFFont
フォントを扱うオブジェクトです

tf	SWFTextField
テキストフィールド（テキストが表示されるボックス状のもの）を扱うオブジェクトです

mc	SWFMovieClip
ムービークリップを扱うオブジェクトです

b	SWFButton
ボタンを扱うオブジェクトです

a	SWFAction
ActionScriptによるアクションを扱うオブジェクトです

命令リファレンスでは引数(ひきすう)のところで次のような記号を用います
v1,v2,…
変数

s1,s2,…
文字列。変数でも可

n1,n2,…
数値。変数でも可

f1,f2,…
浮動小数点数を表す数値型変数(mhsp_floatの変換結果)。HSP 3.0ではmhsp_floatの変換結果は使えないが、整数は自動で変換される

ここからリファレンス開始

  ・sel_(各オブジェクトの略称) n1

    n1  オブジェクト

    それぞれ
    (各オブジェクトの略称)_
    から始まる命令で操作するオブジェクトを選択します。
    (例)
      sel_s（s_setLine命令などで操作するSWFShapeオブジェクトを指定）

  ・destroy_(各オブジェクトの略称) n1

    n1  オブジェクト

    各オブジェクトをメモリ上から削除し、使用不可能にします

SWFMovieオブジェクト関連命令
使用前には操作対象のSWFMovieオブジェクトをsel_m命令で指定します

(例)
sel_m movie

  ・SWFMovie v1

    新しいSWFMovieオブジェクトを作成しv1に代入します。作成した時点ではフレーム番号は0です

  ・m_save s1

    s1  保存ファイル名
    n3  圧縮率。範囲は-1〜9で数値が大きいほど高圧縮(-1は非圧縮)。省略時は-1

    SWFをファイルに保存します。成功するとstatにはそのサイズが代入されます

  ・m_add v1, n2

    v1  SWFDisplayItemオブジェクトが代入される変数
    n2  現在のフレームに追加するオブジェクト

    現在のフレームにオブジェクトを追加し、それに対応するSWFDisplayItemオブジェクトを取得します

  ・m_output v1, n2, [n3]

    v1  SWFデータを出力する変数
    n2  最大サイズ
    n3  圧縮率。範囲は-1〜9で数値が大きいほど高圧縮(-1は非圧縮)。省略時は-1  (minghsp.hpiのみのパラメータ)

    SWFMovieオブジェクトに対応するSWFのデータを取得します。n2に出力される最大のサイズを入れてください
    当然ながらv1に確保されているサイズはn2で指定する以上である必要があります

  ・m_remove n1

    n1  削除するオブジェクトに対応するSWFDisplayItemオブジェクト

    現在のフレームでオブジェクトを削除します

  ・m_nextFrame

    新しいフレームを作成し、そのフレームを現在のフレームとします

  ・m_setBackground n1, n2, n3

    n1  背景色の赤成分(0-255)
    n2    〃    緑成分(0-255)
    n3    〃    青成分(0-255)

    ムービーの背景色を設定します

  ・m_setRate f1

    f1  1秒間に表示するフレーム数

    1秒間に表示するフレーム数を設定します

  ・m_setDimension f1, f2

    f1  横方向サイズ(ピクセル単位)
    f2  縦方向サイズ(ピクセル単位)

    ムービーのキャンバスサイズ(領域の大きさ)を指定します

  ・m_setFrames n1

    n1  総フレーム数

    総フレーム数を設定します

  ・m_streamMp3 s1

    s1  ストリーミング再生するMP3ファイル名

    MP3を現在のフレームからストリーミング再生するようにします

  ・m_streamMp3_buf v1, n2

    v1  ストリーミング再生するMP3のデータ
    n2  MP3のデータサイズ

    MP3データを変数から読み込むこと以外はm_streamMp3と同じです

  ・m_addSound v1,s2,n3 (minghspj.hpiのみ)

    v1  サウンドを示すSWFDisplayItemオブジェクトが代入される変数
    s2  サウンドファイル名
    n3  サウンドのフラグ

    現在のフレームにイベントサウンドを設定します
    n3には次のフラグを設定します
SWFSOUND_NOT_COMPRESSED   入力ファイルは非圧縮のRAWファイル。非指定時これ
SWFSOUND_ADPCM_COMPRESSED               wav2adpcmで変換したADPCMファイル
SWFSOUND_MP3_COMPRESSED                 MP3ファイル

SWFSOUND_5KHZ             サンプリング周波数が5500。非指定時これ
SWFSOUND_11KHZ                                11000
SWFSOUND_22KHZ                                22000
SWFSOUND_44KHZ                                44000

SWFSOUND_8BITS            量子化ビット数が8。非指定時これ
SWFSOUND_16BITS                           16

SWFSOUND_MONO             モノラル。非指定時これ
SWFSOUND_STEREO           ステレオ

    "|"(論理和演算子)でつなぐことで複数同時に指定できます
    (例)
      m_addSound iSound,"test.wav",SWFSOUND_44KHZ | SWFSOUND_16BITS | SWFSOUND_STEREO
    WAVファイルの場合は設定しなくても構いません。設定しても無視されます

  ・m_addSound_buf v1,n2,n3 (minghspj.hpiのみ)

    v1  音声データの入っている変数＆サウンドを示すSWFDisplayItemオブジェクトが代入される数値型変数
    n2  音声データのサイズ
    n3  サウンドのフラグ

フラグは上と同じ

  ・m_startSound n1 (minghspj.hpiのみ)

    n1  サウンドを示すSWFDisplayItemオブジェクト

現在のフレームでイベントサウンドを鳴らします
m_addSoundを実行したフレームの次のフレームで実行してください

  ・m_stopSound n1 (minghspj.hpiのみ)

    n1  サウンドを示すSWFDisplayItemオブジェクト

現在鳴っているn1で示されるイベントサウンドの再生を止めます

  ・m_setButtonSound v1, n2 (minghspj.hpiのみ)

    v1  サウンドを示すSWFDisplayItemオブジェクトの数値型配列
    n2  ボタンを示すSWFDisplayItemオブジェクト

ボタンの各状態に対してイベントサウンドを割り当てます

v1.0  ボタン上からポインタが離れたとき
v1.1  ボタン上にポインタが来たとき
v1.2  ボタンが押されたとき
v1.3  ？

  ・SWFShape v1

v1  作成したSWFShapeオブジェクトを代入する数値型変数

新しいSWFShapeオブジェクトを作成します。

・s_setLine n1, n2, n3, n4, [n5]

  n1  線の太さ
  n2  線の色の赤成分(0〜255)
  n3    〃    緑成分(0〜255)
  n4    〃    青成分(0〜255)
  n5    〃    透明度(0〜255)。省略時255

  選択されたSWFShapeオブジェクトでこれから引く線の太さと色を設定します

・s_addSolidFill v1, n2, n3, n4, [n5]

  v1  作成したSWFFillオブジェクトを代入する数値型変数
  n2  塗りつぶし色の赤成分(0〜255)
  n3        〃      緑成分(0〜255)
  n4        〃      青成分(0〜255)
  n5        〃      透明度(0〜255)

  選択されたSWFShapeオブジェクトに対するSWFFillオブジェクトを作成します。s_addSolidFillでは色からSWFFillオブジェクトを作成します。n5を省略すると255が指定されたのと同じになります

・s_addBitmapFill v1, n2, [n3]

  v1  作成したSWFFillオブジェクトを代入する数値型変数
  n2  SWFBitmapオブジェクト
  n3  フラグ

選択されたSWFShapeオブジェクトに対するSWFFillオブジェクトを作成します。s_addBitmapFillでは画像（SWFBitmapオブジェクト）からSWFFillオブジェクトを作成します。SWFBitmapオブジェクトの作成はSWFBitmap，SWFBitmap_buf命令で行います。n3で指定できるフラグには次のものがあります
SWFFILL_TILED_BITMAP
タイル状に画像を配置する
SWFFILL_CLIPPED_BITMAP
省略時にはSWFFILL_TILED_BITMAPが指定されたのと同じになります

・s_addGradientFill v1, n2, [n3]

v1  作成したSWFFillオブジェクトを代入する数値型変数
n2  SWFGradientオブジェクト
n3  フラグ

選択されたSWFShapeオブジェクトに対するSWFFillオブジェクトを作成します。s_addGradientFillではグラデーション（SWFGradientオブジェクト）からSWFFillオブジェクトを作成します。SWFGradientオブジェクトの作成はSWFGradient，g_addEntryで行います。n3で指定できるフラグには次のものがあります
SWFFILL_LINEAR_GRADIENT
線状のグラデーションを作成します
SWFFILL_RADIAL_GRADIENT
放射状のグラデーションを作成します
省略時にはSWFFILL_LINEAR_GRADIENTが指定されたのと同じになります

・s_setLeftFill n1

n1  SWFFillオブジェクト

・s_setRightFill n1

n1  SWFFillオブジェクト

・s_movePenTo f1, f2

f1,f2  描画基準点の移動先の座標

選択されたSWFShapeオブジェクトでの描画基準点を移動します。
相対座標の基点となります

・s_movePen f1, f2

f1,f2  描画基準点の移動先の相対座標

選択されたSWFShapeオブジェクトでの描画基準点を移動します。

・s_drawLineTo f1, f2

f1,f2  直線を引く先の絶対座標

選択されたSWFShapeオブジェクトにおいてカレントポジションからs_setLine命令で指定した線の太さと色で、指定した座標に向かって直線を引きます。

・s_drawLine f1, f2

f1,f2  直線を引く先の相対座標

選択されたSWFShapeオブジェクトにおいてカレントポジションからs_setLine命令で指定した線の太さと色で、指定したピクセル数分だけ直線を引きます。

・s_drawCurveTo f1, f2, f3, f4

f1,f2  曲線を引く先の相対座標
f3,f4  制御点の相対座標


二次ベジエ曲線を引きます

・s_loadPdr "s1", n2, n3

s1  PDRファイル名もしくはPDRデータが入った変数
n2  フラグ
n3  s1がPDRデータの場合はそのサイズを指定

選択されたSWFShapeオブジェクトに対して、s1に指定したPDRに従って描画を行います。
対応するPDRはPDR Ver0.1, Ver0.2およびPDCLIP Ver0.2です。
この命令が成功するとstatの下から0-16ビットにPDRの幅サイズ、17-30ビットに高さがピクセル単位で代入されます。
statの値から幅と高さを取り出すには
w = stat & 0xffff		;幅
h = (stat >> 16) & 0xefff	;高さ
のようにします。

n2に設定できるフラグには次のものがあります

PDR_MORPH
モーフィングで使用できるようにPDRを読み込みます。
すでにs_newStylesを使っているSWFShapeオブジェクトでは意味がありません。

PDR_GETRECTONLY
幅と高さを取得するだけにします。選択されているSWFShapeオブジェクトは変更されません。

PDR_ASCLIP
PDCLIP形式を読み込む場合、通常はその幅と高さはそれを表現できる最小限のサイズになりますが、これを指定すると、ParaDrawで保存した時の位置に描画されるようになります。

複数同時に指定するには
s_loadPdr "test.pdr",PDR_MORPH | PDR_GETRECTONLY
のように"|"演算子で連結してください。

・s_newStyles

選択されたSWFShapeオブジェクトに対して新しく図形を開始します。
この命令をまたがって同じSWFFillオブジェクトをs_setLeftFill, s_setRightFillに使用することはできません。
新たにs_addSolidFill, s_addBitmapFill, s_addGradientFillでSWFFillオブジェクトを作成してください。
この命令を使用するとそのSWFShapeはモーフィングに使用することができなくなります。

この命令を使用する場合、そのSWFShapeオブジェクトでこの命令を使用するまでは決して
s_setLine, s_addSolidFill, s_addBitmapFill, s_addGradientFillを使用しないでください。

・i_moveTo f1, f2

f1,f2  オブジェクトを移動させる先の座標

オブジェクトを移動します

・i_move f1, f2

f1,f2  オブジェクトを移動させる先の現在の位置からの相対座標

オブジェクトを移動します

・i_scaleTo f1, f2

f1,f2  X方向、Y方向の拡大率(1fが100%)

オブジェクト拡大縮小します

・i_scale f1, f2

f1,f2  X方向、Y方向の増加させる拡大率(1fが100%)

オブジェクト拡大縮小します

・i_rotateTo f1

f1  回転させる角度。反時計回りが正

オブジェクトを回転させます

・i_rotate f1

f1  回転させる現在に対する角度。反時計回りが正

オブジェクトを回転させます

・i_skewXTo f1

f1  歪ませる度合い

オブジェクトを横方向に歪ませます

・i_skewX f1

f1  現在の歪み度からの変化量

オブジェクトを横方向に歪ませます

・i_skewYTo f1

f1  歪ませる度合い

オブジェクトを縦方向に歪ませます

・i_skewY f1

f1  現在の歪み度からの変化量

オブジェクトを縦方向に歪ませます

・i_setDepth n1

n1  オブジェクトの深度

オブジェクトの深度を設定します。深度が大きい数字なほどそのオブジェクトは手前に表示されます。深度はマイナスの値をとることも出来ます。

・i_remove

オブジェクトを削除します

・i_setName s1

s1  オブジェクトに設定する名前

オブジェクトに名前を設定します
名前はアクションスクリプトでオブジェクトを操作する再に必要となります

・i_setRatio f1

f1  1.0が100%

グラデーションやモーフィングでの変化の度合いを設定します

・i_addColor n1, n2, n3, n4

n1, n2, n3, n4  加算する値。それぞれR,G,B,A

オブジェクトの色情報を加算します

・i_multColor f1, f2, f3, f4

f1, f2, f3, f4  乗算する値。それぞれR,G,B,A

オブジェクトの色情報を乗算します

・SWFGradient v1

v1  作成したSWFGradientオブジェクトを代入する数値型変数

新しいSWFGradientオブジェクトを作成します

・g_addEntry f1, n2, n3, n4, n5

f1  変化の割合
n2, n3, n4, n5  それぞれR, G, B, A

グラデーションの制御点を登録します

・SWFBitmap v1, s2, [s3]

v1  作成したSWFBitmapオブジェクトを代入する数値型変数
s2  画像ファイル名
s3  アルファマスクファイル

画像ファイルからSWFBitmapオブジェクトを作成します
読み込める画像フォーマットはJPEG(プログレッシブJPEG不可)とMing独自形式のDBLです
Ming 0.3 beta 1版では、PNGやGIFファイルも読み込むことが出来ます。
s3にファイル名が指定されており、s2がJPEGファイルであるとアルファチャンネルとみなされ、アルファチャンネル付きJPEGのSWFBitmapオブジェクトが作成されます

stat=1  ファイルが非対応のフォーマット
     2  ファイルを読み込めない

・SWFBitmap_buf v1, v2, n3, v4, n5

v1  作成したSWFBitmapオブジェクトを代入する数値型変数
v2  画像ファイルのデータが入った変数
n3  v2の変数に代入された画像データのサイズ
v4  アルファマスクのデータが入った変数
n5  v4の変数に代入されたアルファマスクデータのサイズ

上と同様ですが、これは変数から画像データを読み込みます。SWFBitmapオブジェクトが作成されるとv1の変数に代入されます。
アルファマスクを使わない場合もv4に変数を指定する必要があります。その時はn5を省略するか0を入れてください

・bmp_getWidth v1

v1  SWFBitmapオブジェクトの横方向サイズが代入される数値型変数

SWFBitmapオブジェクトの横方向サイズを取得します。小数なのでmhsp_int命令で整数に変換してください

・bmp_getHeight v1

v1  SWFBitmapオブジェクトの縦方向サイズが代入される数値型変数

SWFBitmapオブジェクトの縦方向サイズを取得します。小数なのでmhsp_int命令で整数に変換してください

  ・mhsp_float v1, n2

    n2の整数を単精度浮動小数点数(float値)に変換し、v1に代入します

  ・mhsp_add v1, f2, f3
f2,f3  足し合わせる数(float値)
v1  結果を代入する変数

単精度浮動小数点数の足し算を行います

  ・mhsp_sub v1, f2, f3

    f2からf3を引き、結果をv1に代入します。f2,f3はともに単精度浮動小数点数である必要があります

  ・mhsp_mul v1, f2, f3

    f2とf3の数値を乗算し、結果をv1に代入します。f2,f3はともに単精度浮動小数点数である必要があります

  ・mhsp_div v1, f2, f3

    f2をf3の数値で割り、結果をv1に代入します。f2,f3はともに単精度浮動小数点数である必要があります

  ・mhsp_int v1, f2

    f2の小数を整数に変換してv1に代入します。小数点以下は切り捨てられます

  ・mhsp_fcloseall

    MingHSPが内部で開いているファイルを全て閉じます。通常は使う必要はありません

・SWFAction_save v1, n2, n3

v1  保存先変数
n2  v1に代入される最大のサイズ
n3  SWFActionオブジェクト

statにはオブジェクトデータのサイズ

SWFActionオブジェクトからオブジェクトデータを抽出してv1に代入します。オブジェクトデータはSWFAction_load命令で読み込むことが出来ます。n2にはv1の変数で確保されているサイズより多きいい数字を入れないでください。
成功した場合も失敗した場合もstatにはv1に代入されるデータのサイズが代入されます。これがn2より大きい場合は必要な量のバッファを確保してやり直してください。

・SWFAction_load v1, v2

v1  SWFActionオブジェクトの参照が代入される変数
v2  SWFAction_saveで保存したオブジェクトデータが代入されている変数

SWFAction_saveで保存したオブジェクトデータからSWFActionオブジェクトを作成します

・mhsp_getaswarn v1, n2

v1  警告の文字列を代入する文字列型変数
n2  v1に確保されているバッファのサイズ

ActionScriptコンパイラが出した警告の文字列を

・mhsp_getaserror v1, n2

v1  エラーの文字列を代入する文字列型変数
n2  v1に確保されているバッファのサイズ
